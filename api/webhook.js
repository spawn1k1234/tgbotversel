const { Telegraf } = require("telegraf");
const { saveUser } = require("../lib/db");

const bot = new Telegraf(process.env.BOT_TOKEN);

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  const user = {
    id: ctx.from.id,
    username: ctx.from.username,
    first_name: ctx.from.first_name,
    last_name: ctx.from.last_name,
    date: new Date(),
  };

  await saveUser(user);

  await ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! üëã`, {
    reply_markup: {
      inline_keyboard: [
        [
          { text: "üì∏ Instagram", url: "https://instagram.com" },
          { text: "üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä", url: "https://t.me/manager" },
        ],
      ],
    },
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
module.exports = async (req, res) => {
  try {
    if (req.method !== "POST") {
      return res.status(405).json({ error: "Method Not Allowed" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    if (!req.body || Object.keys(req.body).length === 0) {
      console.error("–ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞");
      return res.status(400).json({ error: "Empty request body" });
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
    await bot.handleUpdate(req.body, res);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ –≤–µ–±—Ö—É–∫–µ:", err);
    res.status(500).json({ error: "Internal Server Error" });
  }
};
