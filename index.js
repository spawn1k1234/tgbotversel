const { Telegraf, Markup } = require("telegraf");
const express = require("express");
const { BOT_TOKEN, SHOP_URL, INSTAGRAM_URL, MANAGER_URL } = require("./config");

if (!BOT_TOKEN) {
  throw new Error("BOT_TOKEN must be provided!");
}

const bot = new Telegraf(BOT_TOKEN);
const app = express();
const PORT = process.env.PORT || 3000;
const DOMAIN = process.env.DOMAIN || "your-vercel-domain.vercel.app"; // –ø–æ–º–µ–Ω—è–π –Ω–∞ —Å–≤–æ–π –¥–æ–º–µ–Ω –≤ Vercel

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.start((ctx) => {
  return ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç, ${
      ctx.from.first_name || "–¥—Ä—É–≥"
    }! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∞—à Mini App, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã.`,
    Markup.inlineKeyboard([
      [Markup.button.url("üõç –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω", SHOP_URL)],
      [Markup.button.url("üì∏ Instagram", INSTAGRAM_URL)],
      [Markup.button.url("üí¨ –ú–µ–Ω–µ–¥–∂–µ—Ä", MANAGER_URL)],
    ])
  );
});

// –í–µ–±—Ö—É–∫ –¥–ª—è Vercel
app.use(express.json());

app.post(`/bot${BOT_TOKEN}`, (req, res) => {
  bot
    .handleUpdate(req.body, res)
    .then(() => res.status(200).send("OK"))
    .catch((err) => {
      console.error(err);
      res.status(500).send("Error");
    });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
  bot.telegram
    .setWebhook(`https://${DOMAIN}/bot${BOT_TOKEN}`)
    .then(() => console.log("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"))
    .catch(console.error);
});
